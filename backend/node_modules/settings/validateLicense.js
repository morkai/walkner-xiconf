// Part of <https://miracle.systems/p/walkner-xiconf> licensed under <CC BY-NC-SA 4.0>

'use strict';

const crypto = require('crypto');
const _ = require('lodash');
const semver = require('semver');

const LICENSE_RE = new RegExp(
  '^-----BEGIN LICENSE KEY-----([a-zA-Z0-9=+\/]+)-----END LICENSE KEY-----$'
);

module.exports = function validateLicense(app, settingsModule, rawSettings, newSettings, settings)
{
  var config = settingsModule.config;

  if (!_.isString(config.licenseEdPem) || _.isEmpty(config.licenseEdPem))
  {
    if (settings.licenseInfo.error !== 'INVALID_ED_PEM')
    {
      resetLicense('INVALID_ED_PEM');
    }

    return;
  }

  var rawLicenseKey = rawSettings.licenseKey;

  if (!_.isString(rawLicenseKey))
  {
    return;
  }

  rawLicenseKey = rawLicenseKey.trim();

  var matches = rawLicenseKey.trim().replace(/\r|\n/g, '').match(LICENSE_RE);

  if (matches === null)
  {
    return;
  }

  var licenseKey = matches[1];
  var licenseInfo;

  try
  {
    licenseInfo = crypto.publicDecrypt(
      config.licenseEdPem,
      Buffer.from(licenseKey, 'base64')
    ).toString('utf8');
  }
  catch (err)
  {
    if (settings.licenseInfo.error !== 'NO_KEY')
    {
      resetLicense('NO_KEY');
    }

    settingsModule.error(err, "Failed to decrypt the specified license key.", {licenseKey});

    return;
  }

  licenseInfo = licenseInfo.split('\n').map(function(str) { return str.trim(); });
  licenseInfo = {
    appId: licenseInfo[0] || null,
    appVersion: licenseInfo[1] || null,
    date: licenseInfo[2] || null,
    uuid: licenseInfo[3] || null,
    licensee: licenseInfo[4] || null,
    features: parseInt(licenseInfo[5], 10),
    error: null
  };

  if (licenseInfo.date !== null && /^[0-9]{6}$/.test(licenseInfo.date))
  {
    licenseInfo.date = '20' + licenseInfo.date.substr(0, 2)
      + '-' + licenseInfo.date.substr(2, 2)
      + '-' + licenseInfo.date.substr(4, 2);
  }

  if (isNaN(licenseInfo.features))
  {
    licenseInfo.features = 0;
  }

  if (!semver.satisfies(app.options.version.split('-')[0], licenseInfo.appVersion.split('-')[0]))
  {
    licenseInfo.error = 'APP_VERSION';
  }

  if (licenseInfo.appId !== app.options.id)
  {
    licenseInfo.error = 'APP_ID';
  }

  if (rawLicenseKey !== settings.licenseKey)
  {
    newSettings.licenseKey = rawLicenseKey;
  }

  if (JSON.stringify(licenseInfo) !== JSON.stringify(settings.licenseInfo))
  {
    newSettings.licenseInfo = licenseInfo;
  }

  function resetLicense(error)
  {
    newSettings.licenseKey = '';
    newSettings.licenseInfo = {
      appId: null,
      appVersion: null,
      date: null,
      uuid: null,
      licensee: null,
      features: 0,
      error: error
    };
  }
};
