// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const _ = require('lodash');
const express = require('express');
const ExpressView = require('express/lib/view');
const methods = require('methods');
const ejs = require('ejs');
const ejsAmd = require('ejs-amd');
const messageFormatAmd = require('messageformat-amd');
const wrapAmd = require('./wrapAmd');
const rqlMiddleware = require('./rqlMiddleware');
const errorHandlerMiddleware = require('./errorHandlerMiddleware');
const crud = require('./crud');
const monkeyPatch = require('./monkeyPatch');
let cookieParser = null;
let bodyParser = null;
let session = null;
let pmx = null;
let MongoStore = null;

/* eslint-disable no-empty */

try { cookieParser = require('cookie-parser'); }
catch (err) {}

try { bodyParser = require('body-parser'); }
catch (err) {}

try { require('iconv-lite').encodingExists('UTF-8'); }
catch (err) {}

try { session = require('express-session'); }
catch (err) {}

try { pmx = require('pmx'); }
catch (err) {}

try { MongoStore = require('./MongoStore'); }
catch (err) {}

const USE_SESSION = Symbol('EXPRESS_USE_SESSION');

/* eslint-enable no-empty */

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  userId: 'user',
  staticPath: 'public',
  staticBuildPath: 'public-build',
  sessionCookieKey: 'express.sid',
  sessionCookie: {
    maxAge: null,
    path: '/',
    httpOnly: true
  },
  sessionStore: {},
  cookieSecret: null,
  ejsAmdHelpers: {},
  title: 'express',
  jsonBody: {},
  textBody: {},
  urlencodedBody: {},
  ignoredErrorCodes: ['ECONNRESET', 'ECONNABORTED'],
  jsonToXlsxExe: null,
  longRouteDuration: 0,
  noSessionPatterns: [],
  routes: (app, expressModule) => {} // eslint-disable-line no-unused-vars
};

exports.start = (app, expressModule) =>
{
  const {config} = expressModule;
  const mongoose = app[config.mongooseId];
  const development = app.options.env === 'development';
  const staticPath = config[development ? 'staticPath' : 'staticBuildPath'];
  const expressApp = express();

  expressModule.staticPath = staticPath;

  expressModule.app = expressApp;

  expressModule.crud = crud;

  expressModule.sessionStore = mongoose
    ? new MongoStore(mongoose.connection.db, config.sessionStore)
    : session ? new session.MemoryStore() : null;

  expressModule.router = express.Router(); // eslint-disable-line new-cap

  methods.forEach((method) =>
  {
    expressModule[method] = (...args) => expressModule.router[method](...args);
  });

  expressApp.engine('ejs', ejs.renderFile);
  expressApp.set('trust proxy', true);
  expressApp.set('view engine', 'ejs');
  expressApp.set('views', app.pathTo('templates'));

  if (development)
  {
    expressApp.set('json spaces', 2);
  }

  expressApp.use((req, res, next) =>
  {
    req.isFrontendRequest = req.url !== '/config.js'
      && (/^\/(app\/|assets\/|files\/|vendor\/|favicon\.)/.test(req.url)
      || /^\/[a-z\-]+\.js$/.test(req.url));

    let noSession = req.isFrontendRequest;

    if (!noSession && expressModule.config.noSessionPatterns.length)
    {
      for (const noSessionPattern of expressModule.config.noSessionPatterns)
      {
        if (typeof noSessionPattern === 'function')
        {
          noSession = !!noSessionPattern(req);
        }
        else if (noSessionPattern instanceof RegExp)
        {
          noSession = noSessionPattern.test(req.url);
        }
        else
        {
          noSession = noSessionPattern === req.url;
        }

        if (noSession)
        {
          break;
        }
      }
    }

    req[USE_SESSION] = !noSession;

    next();
  });

  app.broker.publish('express.beforeMiddleware', {
    module: expressModule
  });

  if (development)
  {
    setUpDevMiddleware(staticPath);
  }

  if (config.cookieSecret && cookieParser)
  {
    expressApp.use(cookieParser(config.cookieSecret));
  }

  if (bodyParser)
  {
    expressApp.use(bodyParser.json(config.jsonBody));
    expressApp.use(bodyParser.urlencoded({extended: false, ...config.urlencodedBody}));
    expressApp.use(bodyParser.text(_.defaults({type: 'text/*'}, config.textBody)));
  }

  expressApp.use(rqlMiddleware());

  if (expressModule.sessionStore)
  {
    const sessionMiddleware = session({
      store: expressModule.sessionStore,
      key: config.sessionCookieKey,
      cookie: config.sessionCookie,
      secret: config.cookieSecret,
      saveUninitialized: true,
      resave: false,
      rolling: true
    });

    expressApp.use((req, res, next) =>
    {
      if (req[USE_SESSION])
      {
        sessionMiddleware(req, res, next);
      }
      else
      {
        next();
      }
    });
  }

  if (expressModule.config.longRouteDuration > 0)
  {
    expressApp.use(timeLongRequest);
  }

  app.broker.publish('express.beforeRouter', {
    module: expressModule
  });

  expressApp.use('/', expressModule.router);

  if (typeof expressModule.config.routes === 'function')
  {
    const routes = expressModule.config.routes(app, expressModule);

    if (Array.isArray(routes))
    {
      routes.forEach(setUpRoutes => setUpRoutes(app, expressModule));
    }
  }
  else if (Array.isArray(expressModule.config.routes))
  {
    expressModule.config.routes.forEach(setUpRoutes => setUpRoutes(app, expressModule));
  }

  expressApp.use(express.static(staticPath));

  if (pmx !== null)
  {
    expressApp.use(pmx.expressErrorHandler());
  }

  const errorHandlerOptions = {
    title: config.title,
    basePath: path.resolve(app.options.rootPath, '../')
  };

  expressApp.use(errorHandlerMiddleware(expressModule, errorHandlerOptions));

  monkeyPatch(app, expressModule, {
    View: ExpressView
  });

  /**
   * @private
   * @param {string} staticPath
   */
  function setUpDevMiddleware(staticPath)
  {
    ejsAmd.wrapAmd = wrapEjsAmd.bind(null, config.ejsAmdHelpers);

    const templateUrlRe = /^\/app\/([a-zA-Z0-9\-]+)\/templates\/(.*?)\.js$/;
    const ejsAmdMiddleware = ejsAmd.middleware({
      views: staticPath
    });

    expressApp.use((req, res, next) =>
    {
      const matches = req.url.match(templateUrlRe);

      if (matches === null)
      {
        return next();
      }

      ejsAmdMiddleware(req, res, next);
    });

    expressApp.use('/app/nls/locale/', messageFormatAmd.localeMiddleware());

    expressApp.use('/app/nls/', messageFormatAmd.nlsMiddleware({
      localeModulePrefix: 'app/nls/locale/',
      jsonPath: (locale, nlsName) =>
      {
        const jsonFile = (locale === null ? 'root' : locale) + '.json';

        return path.join(staticPath, 'app', nlsName, 'nls', jsonFile);
      }
    }));
  }

  /**
   * @private
   * @param {Object} ejsAmdHelpers
   * @param {string} js
   * @returns {string}
   */
  function wrapEjsAmd(ejsAmdHelpers, js)
  {
    return wrapAmd('return ' + js, ejsAmdHelpers);
  }

  /**
   * @private
   * @param {Object} req
   * @param {Object} res
   * @param {function} next
   */
  function timeLongRequest(req, res, next)
  {
    const complete = () => clearTimeout(res.longRequestTimer);

    res.longRequestTimer = setTimeout(logLongRequest, expressModule.config.longRouteDuration, req);

    res.once('close', complete);
    res.once('finish', complete);

    next();
  }

  /**
   * @private
   * @param {Object} req
   */
  function logLongRequest(req)
  {
    const session = req.session ? req.session.user : {};
    const user = app[expressModule.config.userId]
      ? app[expressModule.config.userId].createUserInfo(session, req)
      : session;

    expressModule.info(`Long request.`, {url: req.url, user});
  }
};
