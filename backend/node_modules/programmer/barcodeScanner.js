// Part of <https://miracle.systems/p/walkner-xiconf> licensed under <CC BY-NC-SA 4.0>

'use strict';

const {EOL} = require('os');
const {spawn} = require('child_process');
const _ = require('lodash');

module.exports = (app, programmerModule) =>
{
  const logger = programmerModule.logger.create({submodule: 'barcodeScanner'});
  const settings = app[programmerModule.config.settingsId];

  const scannerSnToId = new Map();
  let motoBarScan = null;
  let buffer = '';

  app.broker.subscribe('app.started', toggleMotoBarScan).setLimit(1);

  app.broker.subscribe('settings.changed', toggleMotoBarScan).setFilter(changes => changes.bgScanner !== undefined);

  app.broker.subscribe('programmer.*.checkFailed', message =>
  {
    if (!motoBarScan)
    {
      return;
    }

    let scannerId = message.scannerId;

    if (!_.isString(scannerId) || !/^[A-Z0-9]+$/.test(scannerId))
    {
      scannerId = '1';
    }

    if (scannerSnToId.has(scannerId))
    {
      scannerId = scannerSnToId.get(scannerId);
    }

    const bgScannerBeep = settings.get('bgScannerBeepBad');

    if (bgScannerBeep >= 0)
    {
      motoBarScan.stdin.write(
        `LED ${scannerId} RED 1${EOL}BEEP ${scannerId} ${bgScannerBeep}${EOL}`
      );
    }
  });

  app.broker.subscribe('programmer.*.checked', function(message)
  {
    if (!motoBarScan)
    {
      return;
    }

    let scannerId = message.scannerId;

    if (!_.isString(scannerId) || !/^[A-Z0-9]+$/.test(scannerId))
    {
      scannerId = '1';
    }

    if (scannerSnToId.has(scannerId))
    {
      scannerId = scannerSnToId.get(scannerId);
    }

    const bgScannerBeep = settings.get(message.done ? 'bgScannerBeepDone' : 'bgScannerBeepGood');

    if (bgScannerBeep >= 0)
    {
      motoBarScan.stdin.write(
        `LED ${scannerId} GREEN 1${EOL}BEEP ${scannerId} ${bgScannerBeep}${EOL}`
      );
    }
  });

  function toggleMotoBarScan()
  {
    if (motoBarScan === null && settings.get('bgScanner'))
    {
      startMotoBarScan();
    }
    else
    {
      stopMotoBarScan();
    }
  }

  function stopMotoBarScan()
  {
    if (motoBarScan === null)
    {
      return;
    }

    buffer = '';

    motoBarScan.stdout.removeAllListeners();
    motoBarScan.stderr.removeAllListeners();
    motoBarScan.removeAllListeners();
    motoBarScan.on('error', noop);
    motoBarScan.kill();
    motoBarScan = null;

    logger.info("Stopped.");
  }

  function startMotoBarScan()
  {
    if (motoBarScan !== null || !settings.get('bgScanner'))
    {
      return;
    }

    motoBarScan = spawn(programmerModule.config.motoBarScanFile);

    motoBarScan.on('error', err =>
    {
      logger.error(err);
    });

    motoBarScan.on('exit', (exitCode, signal) =>
    {
      logger.info("Exited.", {exitCode, signal});
    });

    motoBarScan.on('close', () =>
    {
      motoBarScan = null;
      buffer = '';

      setTimeout(startMotoBarScan, 5000);
    });

    motoBarScan.stdout.setEncoding('utf8');
    motoBarScan.stdout.on('data', data =>
    {
      buffer += data;

      let eolIndex;

      while ((eolIndex = buffer.indexOf(EOL)) !== -1) // eslint-disable-line no-cond-assign
      {
        const scannedValue = buffer.substr(0, eolIndex);
        let matches = scannedValue.match(/^BARCODE ([0-9]+) ([A-Z0-9]+) (.*?)$/);

        if (matches === null)
        {
          matches = scannedValue.match(
            /^BARCODE .*?scannerID>([0-9]+).*?serialnumber>([0-9A-Z]+).*?datalabel>([0-9A-Z ]+)/i
          );

          if (matches)
          {
            const scannerId = matches[1];
            const scannerSn = matches[2];
            const dataLabel = matches[3]
              .trim()
              .split(' ')
              .map(hex => String.fromCharCode(parseInt(hex, 16)))
              .join('')
              .trim();

            scannerSnToId.set(scannerSn, scannerId);

            matches = [null, null, scannerSn, dataLabel];
          }
        }

        if (matches !== null)
        {
          app.broker.publish('programmer.barcodeScanned', {
            scannerId: matches[2],
            value: matches[3]
          });
        }

        buffer = buffer.substr(eolIndex + EOL.length);
      }
    });

    motoBarScan.stderr.setEncoding('utf8');
    motoBarScan.stderr.on('data', data =>
    {
      logger.error(data);
    });

    logger.info("Started.");
  }

  function noop() {}
};
